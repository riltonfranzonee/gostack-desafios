{"version":3,"sources":["HeaderContainer.tsx"],"names":["HeaderContainer","mode","scenes","layout","insets","getFocusedRoute","getPreviousRoute","onContentHeightChange","gestureDirection","styleInterpolator","style","focusedRoute","slice","map","scene","i","self","length","options","descriptor","isFocused","key","route","previousRoute","previous","j","s","previousScene","nextScene","isHeaderStatic","headerShown","props","navigation","forSlideUp","forSlideRight","forSlideLeft","forNoAnimation","e","height","nativeEvent","undefined","headerTransparent","styles","header","StyleSheet","create","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationContext } from 'react-navigation';\nimport { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport {\n  Route,\n  Layout,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getFocusedRoute,\n  getPreviousRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n\n  return (\n    <View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { options } = scene.descriptor;\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previousRoute = getPreviousRoute({ route: scene.route });\n\n        let previous;\n\n        if (previousRoute) {\n          // The previous scene will be shortly before the current scene in the array\n          // So loop back from current index to avoid looping over the full array\n          for (let j = i - 1; j >= 0; j--) {\n            const s = self[j];\n\n            if (s && s.route.key === previousRoute.key) {\n              previous = s;\n              break;\n            }\n          }\n        }\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n        const isHeaderStatic =\n          (previousScene &&\n            previousScene.descriptor.options.headerShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          (nextScene && nextScene.descriptor.options.headerShown === false);\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation:  scene.descriptor.navigation as StackNavigationProp,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <View\n              onLayout={\n                onContentHeightChange\n                  ? e =>\n                      onContentHeightChange({\n                        route: scene.route,\n                        height: e.nativeEvent.layout.height,\n                      })\n                  : undefined\n              }\n              pointerEvents={isFocused ? 'box-none' : 'none'}\n              accessibilityElementsHidden={!isFocused}\n              importantForAccessibility={\n                isFocused ? 'auto' : 'no-hide-descendants'\n              }\n              style={\n                mode === 'float' || options.headerTransparent\n                  ? styles.header\n                  : null\n              }\n            >\n              {options.headerShown !== false ? (\n                options.header !== undefined ? (\n                  options.header(props)\n                ) : (\n                  <Header {...props} />\n                )\n              ) : null}\n            </View>\n          </NavigationContext.Provider>\n        );\n      })}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]}