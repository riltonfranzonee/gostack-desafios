{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","routeConfigs","config","order","Object","keys","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","hasOwnProperty","initialRouteIndex","indexOf","Error","map","n","join","childRouters","forEach","routeName","screen","router","getParamsForRoute","params","routeConfig","getPathAndParamsForRoute","getActionForPathAndParams","resetChildRoute","initialParams","undefined","childRouter","childAction","NavigationActions","init","getStateForAction","key","getNextState","action","prevState","possibleNextState","updateNextStateHistory","nextState","index","nextRouteKeyHistory","routeKeyHistory","type","NAVIGATE","keyToAdd","routes","filter","k","push","BACK","pop","prevRouteName","nextRoutes","getInitialState","initialState","isTransitioning","initialKey","getActionCreators","route","stateKey","inputState","state","activeChildIndex","INIT","SwitchActions","JUMP_TO","findIndex","i","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","max","length","routeKey","didNavigate","find","childId","childState","newChildState","childStateUpdate","SET_PARAMS","lastRoute","isActionBackOrPop","StackActions","POP","POP_TO_TOP","sendActionToInactiveChildren","preserveFocus","getComponentForState","getComponentForRouteName","getPathAndParamsForState","path","getScreenOptions","defaultNavigationOptions"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const initialRouteParams = config.initialRouteParams;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map(n => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach(routeName => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : undefined;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        params,\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      params,\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(k => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n      isTransitioning: false,\n    };\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map(route => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          route => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${\n              action.routeName\n            }' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map(route => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find(route => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]}