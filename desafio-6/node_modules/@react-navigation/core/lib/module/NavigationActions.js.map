{"version":3,"sources":["NavigationActions.ts"],"names":["BACK","INIT","NAVIGATE","SET_PARAMS","back","payload","type","key","immediate","init","action","params","navigate","routeName","setParams","preserveFocus"],"mappings":"AAmDA,MAAO,IAAMA,CAAAA,IAAI,CAAG,iBAAb,CACP,MAAO,IAAMC,CAAAA,IAAI,CAAG,iBAAb,CACP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,qBAAjB,CACP,MAAO,IAAMC,CAAAA,UAAU,CAAG,uBAAnB,CAGP,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAClBC,CAAAA,OADkB,2DACqB,EADrB,OAEQ,CAC1BC,IAAI,CAAEN,IADoB,CAE1BO,GAAG,CAAEF,OAAO,CAACE,GAFa,CAG1BC,SAAS,CAAEH,OAAO,CAACG,SAHO,CAFR,EAAb,CAQP,MAAO,IAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAA+C,IAA9CJ,CAAAA,OAA8C,2DAAP,EAAO,CACjE,GAAMK,CAAAA,MAA4B,CAAG,CACnCJ,IAAI,CAAEL,IAD6B,CAArC,CAGA,GAAII,OAAO,CAACM,MAAZ,CAAoB,CAClBD,MAAM,CAACC,MAAP,CAAgBN,OAAO,CAACM,MAAxB,CACD,CACD,MAAOD,CAAAA,MAAP,CACD,CARM,CAUP,MAAO,IAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CACtBP,OADsB,CAEO,CAC7B,GAAMK,CAAAA,MAAgC,CAAG,CACvCJ,IAAI,CAAEJ,QADiC,CAEvCW,SAAS,CAAER,OAAO,CAACQ,SAFoB,CAAzC,CAIA,GAAIR,OAAO,CAACM,MAAZ,CAAoB,CAClBD,MAAM,CAACC,MAAP,CAAgBN,OAAO,CAACM,MAAxB,CACD,CACD,GAAIN,OAAO,CAACK,MAAZ,CAAoB,CAClBA,MAAM,CAACA,MAAP,CAAgBL,OAAO,CAACK,MAAxB,CACD,CACD,GAAIL,OAAO,CAACE,GAAZ,CAAiB,CACfG,MAAM,CAACH,GAAP,CAAaF,OAAO,CAACE,GAArB,CACD,CACD,MAAOG,CAAAA,MAAP,CACD,CAjBM,CAmBP,MAAO,IAAMI,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACvBT,OADuB,QAEQ,CAC/BC,IAAI,CAAEH,UADyB,CAE/BI,GAAG,CAAEF,OAAO,CAACE,GAFkB,CAG/BI,MAAM,CAAEN,OAAO,CAACM,MAHe,CAI/BI,aAAa,CAAE,IAJgB,CAFR,EAAlB","sourcesContent":["export interface NavigationParams {\n  [key: string]: any;\n}\n\nexport interface NavigationNavigateActionPayload {\n  routeName: string;\n  params?: NavigationParams;\n\n  // The action to run inside the sub-router\n  action?: NavigationNavigateAction;\n\n  key?: string;\n}\n\nexport interface NavigationNavigateAction\n  extends NavigationNavigateActionPayload {\n  type: 'Navigation/NAVIGATE';\n}\n\nexport interface NavigationBackActionPayload {\n  key?: string | null;\n  immediate?: boolean;\n}\n\nexport interface NavigationBackAction extends NavigationBackActionPayload {\n  type: 'Navigation/BACK';\n}\n\nexport interface NavigationInitActionPayload {\n  params?: NavigationParams;\n}\n\nexport interface NavigationInitAction extends NavigationInitActionPayload {\n  type: 'Navigation/INIT';\n}\n\nexport interface NavigationSetParamsActionPayload {\n  // The key of the route where the params should be set\n  key: string;\n\n  // The new params to merge into the existing route params\n  params?: NavigationParams;\n}\n\nexport interface NavigationSetParamsAction\n  extends NavigationSetParamsActionPayload {\n  type: 'Navigation/SET_PARAMS';\n  preserveFocus: true;\n}\n\n// Action constants\nexport const BACK = 'Navigation/BACK';\nexport const INIT = 'Navigation/INIT';\nexport const NAVIGATE = 'Navigation/NAVIGATE';\nexport const SET_PARAMS = 'Navigation/SET_PARAMS';\n\n// Action creators\nexport const back = (\n  payload: NavigationBackActionPayload = {}\n): NavigationBackAction => ({\n  type: BACK,\n  key: payload.key,\n  immediate: payload.immediate,\n});\n\nexport const init = (payload: NavigationInitActionPayload = {}) => {\n  const action: NavigationInitAction = {\n    type: INIT,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  return action;\n};\n\nexport const navigate = (\n  payload: NavigationNavigateActionPayload\n): NavigationNavigateAction => {\n  const action: NavigationNavigateAction = {\n    type: NAVIGATE,\n    routeName: payload.routeName,\n  };\n  if (payload.params) {\n    action.params = payload.params;\n  }\n  if (payload.action) {\n    action.action = payload.action;\n  }\n  if (payload.key) {\n    action.key = payload.key;\n  }\n  return action;\n};\n\nexport const setParams = (\n  payload: NavigationSetParamsActionPayload\n): NavigationSetParamsAction => ({\n  type: SET_PARAMS,\n  key: payload.key,\n  params: payload.params,\n  preserveFocus: true,\n});\n"]}