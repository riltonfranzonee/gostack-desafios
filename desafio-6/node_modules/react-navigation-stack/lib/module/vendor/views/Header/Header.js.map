{"version":3,"sources":["Header.tsx"],"names":["React","Dimensions","StackActions","getStatusBarHeight","HeaderSegment","getDefaultHeaderHeight","HeaderTitle","Header","memo","props","scene","previous","layout","insets","navigation","styleInterpolator","options","descriptor","title","headerTitle","undefined","route","routeName","leftLabel","headerBackTitle","o","dispatch","pop","key","Object","defineProperty","get","console","warn"],"mappings":"mKAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,KAA2B,cAA3B,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,kBAAT,KAAmC,8BAAnC,CAEA,MAAOC,CAAAA,aAAP,EAAwBC,sBAAxB,KAAsD,iBAAtD,CAEA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA,GAAMC,CAAAA,MAAM,CAAGP,KAAK,CAACQ,IAAN,CAAW,QAASD,CAAAA,MAAT,CAAgBE,KAAhB,CAAyC,IAE/DC,CAAAA,KAF+D,CAQ7DD,KAR6D,CAE/DC,KAF+D,CAG/DC,QAH+D,CAQ7DF,KAR6D,CAG/DE,QAH+D,CAI/DC,MAJ+D,CAQ7DH,KAR6D,CAI/DG,MAJ+D,CAK/DC,MAL+D,CAQ7DJ,KAR6D,CAK/DI,MAL+D,CAM/DC,UAN+D,CAQ7DL,KAR6D,CAM/DK,UAN+D,CAO/DC,iBAP+D,CAQ7DN,KAR6D,CAO/DM,iBAP+D,IASzDC,CAAAA,OATyD,CAS7CN,KAAK,CAACO,UATuC,CASzDD,OATyD,CAUjE,GAAME,CAAAA,KAAK,CACT,MAAOF,CAAAA,OAAO,CAACG,WAAf,GAA+B,UAA/B,EACAH,OAAO,CAACG,WAAR,GAAwBC,SADxB,CAEIJ,OAAO,CAACG,WAFZ,CAGIH,OAAO,CAACE,KAAR,GAAkBE,SAAlB,CACAJ,OAAO,CAACE,KADR,CAEAR,KAAK,CAACW,KAAN,CAAYC,SANlB,CAQA,GAAIC,CAAAA,SAAJ,CAIA,GAAIP,OAAO,CAACQ,eAAR,GAA4BJ,SAAhC,CAA2C,CACzCG,SAAS,CAAGP,OAAO,CAACQ,eAApB,CACD,CAFD,IAEO,IAAIb,QAAJ,CAAc,CACnB,GAAMc,CAAAA,CAAC,CAAGd,QAAQ,CAACM,UAAT,CAAoBD,OAA9B,CAEAO,SAAS,CACP,MAAOE,CAAAA,CAAC,CAACN,WAAT,GAAyB,UAAzB,EAAuCM,CAAC,CAACN,WAAF,GAAkBC,SAAzD,CACIK,CAAC,CAACN,WADN,CAEIM,CAAC,CAACP,KAAF,GAAYE,SAAZ,CACAK,CAAC,CAACP,KADF,CAEAP,QAAQ,CAACU,KAAT,CAAeC,SALrB,CAMD,CAED,MACE,qBAAC,aAAD,aACMN,OADN,EAEE,MAAM,CAAEH,MAFV,CAGE,MAAM,CAAED,MAHV,CAIE,KAAK,CAAEF,KAJT,CAKE,KAAK,CAAEQ,KALT,CAME,SAAS,CAAEK,SANb,CAOE,WAAW,CACT,MAAOP,CAAAA,OAAO,CAACG,WAAf,GAA+B,UAA/B,CACI,SAACV,KAAD,QAAkC,qBAAC,WAAD,aAAiBA,KAAjB,mDAAlC,EADJ,CAEIO,OAAO,CAACG,WAVhB,CAYE,QAAQ,CACNR,QAAQ,CAEJ,iBAAMG,CAAAA,UAAU,CAACY,QAAX,CAAoBxB,YAAY,CAACyB,GAAb,CAAiB,CAAEC,GAAG,CAAElB,KAAK,CAACW,KAAN,CAAYO,GAAnB,CAAjB,CAApB,CAAN,EAFI,CAGJR,SAhBR,CAkBE,iBAAiB,CAAEL,iBAlBrB,kDADF,CAsBD,CAzDc,CAAf,CA2DAc,MAAM,CAACC,cAAP,CAAsBvB,MAAtB,CAA8B,QAA9B,CAAwC,CACtCwB,GADsC,eAChC,CACJC,OAAO,CAACC,IAAR,CACE,oJADF,EAIA,MAAO5B,CAAAA,sBAAsB,CAC3BJ,UAAU,CAAC8B,GAAX,CAAe,QAAf,CAD2B,CAE3B5B,kBAAkB,CAAC,IAAD,CAFS,CAA7B,CAID,CAVqC,CAAxC,EAaA,cAAeI,CAAAA,MAAf","sourcesContent":["import * as React from 'react';\nimport { Dimensions } from 'react-native';\nimport { StackActions } from 'react-navigation';\nimport { getStatusBarHeight } from 'react-native-iphone-x-helper';\n\nimport HeaderSegment, { getDefaultHeaderHeight } from './HeaderSegment';\nimport { StackHeaderProps, StackHeaderTitleProps } from '../../types';\nimport HeaderTitle from './HeaderTitle';\n\nconst Header = React.memo(function Header(props: StackHeaderProps) {\n  const {\n    scene,\n    previous,\n    layout,\n    insets,\n    navigation,\n    styleInterpolator,\n  } = props;\n  const { options } = scene.descriptor;\n  const title =\n    typeof options.headerTitle !== 'function' &&\n    options.headerTitle !== undefined\n      ? options.headerTitle\n      : options.title !== undefined\n      ? options.title\n      : scene.route.routeName;\n\n  let leftLabel;\n\n  // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n\n    leftLabel =\n      typeof o.headerTitle !== 'function' && o.headerTitle !== undefined\n        ? o.headerTitle\n        : o.title !== undefined\n        ? o.title\n        : previous.route.routeName;\n  }\n\n  return (\n    <HeaderSegment\n      {...options}\n      insets={insets}\n      layout={layout}\n      scene={scene}\n      title={title}\n      leftLabel={leftLabel}\n      headerTitle={\n        typeof options.headerTitle !== 'function'\n          ? (props: StackHeaderTitleProps) => <HeaderTitle {...props} />\n          : options.headerTitle\n      }\n      onGoBack={\n        previous\n        // @ts-ignore\n          ? () => navigation.dispatch(StackActions.pop({ key: scene.route.key }))\n          : undefined\n      }\n      styleInterpolator={styleInterpolator}\n    />\n  );\n});\n\nObject.defineProperty(Header, 'HEIGHT', {\n  get() {\n    console.warn(\n      \"Deprecation in 'createStackNavigator': 'Header.HEIGHT' will be removed in a future version. Use 'useHeaderHeight' or 'HeaderHeightContext' instead\"\n    );\n\n    return getDefaultHeaderHeight(\n      Dimensions.get('window'),\n      getStatusBarHeight(true)\n    );\n  },\n});\n\nexport default Header;\n"]}