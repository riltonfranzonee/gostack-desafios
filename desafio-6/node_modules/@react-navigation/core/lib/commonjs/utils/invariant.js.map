{"version":3,"sources":["invariant.ts"],"names":["validateFormat","process","env","NODE_ENV","format","undefined","Error","invariant","condition","args","error","argIndex","replace","name","framesToPop"],"mappings":"gFAWA,GAAIA,CAAAA,cAAyC,CAAG,yBAAW,CAAE,CAA7D,CAEA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YAA7B,CAA2C,CACzCH,cAAc,CAAG,wBAASI,MAAT,CAA0B,CACzC,GAAIA,MAAM,GAAKC,SAAf,CAA0B,CACxB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,8CAAV,CAAN,CACD,CACF,CAJD,CAKD,CAED,QAASC,CAAAA,SAAT,CAAmBC,SAAnB,CAAuCJ,MAAvC,CAAwE,+BAAbK,IAAa,qDAAbA,IAAa,0BACtET,cAAc,CAACI,MAAD,CAAd,CAEA,GAAI,CAACI,SAAL,CAAgB,CACd,GAAIE,CAAAA,KAAJ,CACA,GAAIN,MAAM,GAAKC,SAAf,CAA0B,CACxBK,KAAK,CAAG,GAAIJ,CAAAA,KAAJ,CACN,+HADM,CAAR,CAGD,CAJD,IAIO,CACL,GAAIK,CAAAA,QAAQ,CAAG,CAAf,CACAD,KAAK,CAAG,GAAIJ,CAAAA,KAAJ,CAAUF,MAAM,CAACQ,OAAP,CAAe,KAAf,CAAsB,iBAAMH,CAAAA,IAAI,CAACE,QAAQ,EAAT,CAAV,EAAtB,CAAV,CAAR,CACAD,KAAK,CAACG,IAAN,CAAa,qBAAb,CACD,CAEDH,KAAK,CAACI,WAAN,CAAoB,CAApB,CACA,KAAMJ,CAAAA,KAAN,CACD,CACF,C,aAEcH,S","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nlet validateFormat: (format?: string) => void = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function(format?: string) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition: boolean, format?: string, ...args: any[]) {\n  validateFormat(format);\n\n  if (!condition) {\n    let error: Error & { framesToPop?: number };\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      let argIndex = 0;\n      error = new Error(format.replace(/%s/g, () => args[argIndex++]));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nexport default invariant;\n"]}